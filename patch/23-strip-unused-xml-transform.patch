Index: org/jivesoftware/smackx/pubsub/PayloadItem.java
===================================================================
--- org/jivesoftware/smackx/pubsub/PayloadItem.java	(revision 12597)
+++ org/jivesoftware/smackx/pubsub/PayloadItem.java	(working copy)
@@ -16,8 +16,6 @@
 import org.jivesoftware.smack.packet.PacketExtension;
 import org.jivesoftware.smackx.pubsub.provider.ItemProvider;
 
-import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
-
 /**
  * This class represents an item that has been, or will be published to a
  * pubsub node.  An <tt>Item</tt> has several properties that are dependent
@@ -79,7 +77,7 @@
 	 * 
 	 * <p>
 	 * <b>Note:</b> This is not valid for publishing an item to a node, only receiving from 
-	 * one as part of {@link Message}.  If used to create an Item to publish 
+	 * one as part of message.  If used to create an Item to publish 
 	 * (via {@link LeafNode#publish(Item)}, the server <i>may</i> return an
 	 * error for an invalid packet.
 	 * 
@@ -136,4 +134,4 @@
 	{
 		return getClass().getName() + " | Content [" + toXML() + "]";
 	}
-}
\ No newline at end of file
+}
Index: org/jivesoftware/smackx/pubsub/util/XmlUtils.java
===================================================================
--- org/jivesoftware/smackx/pubsub/util/XmlUtils.java	(revision 12597)
+++ org/jivesoftware/smackx/pubsub/util/XmlUtils.java	(working copy)
@@ -15,12 +15,6 @@
 
 import java.io.StringReader;
 
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.stream.StreamResult;
-import javax.xml.transform.stream.StreamSource;
-
 /**
  * Simple utility for pretty printing xml.
  * 
@@ -28,33 +22,7 @@
  */
 public class XmlUtils
 {
-	/**
-	 * 
-	 * @param header Just a title for the stanza for readability.  Single word no spaces since
-	 * it is inserted as the root element in the output.
-	 * @param xml The string to pretty print
-	 */
-	static public void prettyPrint(String header, String xml)
-	{
-		try
-		{
-			Transformer transformer = TransformerFactory.newInstance().newTransformer();
-			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "3");
 
-			if (header != null)
-			{
-				xml = "\n<" + header + ">" + xml + "</" + header + '>';
-			}
-			transformer.transform(new StreamSource(new StringReader(xml)), new StreamResult(System.out));
-		}
-		catch (Exception e)
-		{
-			System.out.println("Something wrong with xml in \n---------------\n" + xml + "\n---------------");
-			e.printStackTrace();
-		}
-	}
-
 	static public void appendAttribute(StringBuilder builder, String att, String value)
 	{
 		builder.append(" ");
